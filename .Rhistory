# Asignar nombres a las columnas
colnames(datos) <- c("año", "mes", "dia", "precipitacion", "max_temp", "min_temp")
# Cargar los datos desde el archivo CSV
datos <- read.csv(file.choose(), header = FALSE, sep = " ")
View(datos)
# Asignar nombres a las columnas
colnames(datos) <- c("año", "mes", "dia", "precipitacion", "max_temp", "min_temp")
View(datos)
datos$precipitacion <- na.approx(datos$precipitacion)
install.packages("zoo")
# Completar datos faltantes en la serie de precipitación utilizando interpolación lineal
datos$precipitacion[datos$precipitacion == -99.9] <- NA
datos$min_temp <- na.approx(datos$min_temp)
library(zoo)
datos$min_temp <- na.approx(datos$min_temp)
datos$max_temp <- na.approx(datos$max_temp)
datos$precipitacion <- na.approx(datos$precipitacion)
# Completar datos faltantes en la serie de precipitación, max_temp y min_temp utilizando interpolación lineal
datos$precipitacion[datos$precipitacion == -99.9] <- NA
datos$max_temp[datos$max_temp == -99.9] <- NA
datos$min_temp[datos$min_temp == -99.9] <- NA
promedio_min_temp <- aggregate(min_temp ~ año, data = datos, mean)
# Calcular el promedio de temperatura máxima y mínima por año
promedio_max_temp <- aggregate(max_temp ~ año, data = datos, mean)
# Calcular la precipitación total anual
precipitacion_anual <- aggregate(precipitacion ~ año, data = datos, sum)
View(precipitacion_anual)
View(promedio_max_temp)
install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_bar(data = precipitacion_anual, aes(x = año, y = precipitacion), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(data = promedio_max_temp, aes(x = año, y = max_temp, color = "Temperatura Máxima")) +
geom_line(data = promedio_min_temp, aes(x = año, y = min_temp, color = "Temperatura Mínima")) +
labs(x = "Año", y = "Precipitación Total (mm) / Temperatura (°C)", title = "Precipitación Total Anual y Promedio de Temperaturas") +
scale_color_manual(values = c("Temperatura Máxima" = "red", "Temperatura Mínima" = "blue")) +
theme_minimal()
# Cargar los datos desde el archivo CSV
datos <- read.csv(file.choose(), header = FALSE, sep = " ")
# Asignar nombres a las columnas
colnames(datos) <- c("año", "mes", "dia", "precipitacion", "max_temp", "min_temp")
datos$precipitacion[datos$precipitacion == -99.9] <- NA
datos$max_temp[datos$max_temp == -99.9] <- NA
datos$min_temp[datos$min_temp == -99.9] <- NA
datos$precipitacion <- na.approx(datos$precipitacion)
library(zoo)
# Asignar nombres a las columnas
colnames(datos) <- c("año", "mes", "dia", "precipitacion", "max_temp", "min_temp")
# Completar datos faltantes en la serie de precipitación, max_temp y min_temp utilizando interpolación lineal
datos$precipitacion[datos$precipitacion == -99.9] <- NA
datos$max_temp[datos$max_temp == -99.9] <- NA
datos$min_temp[datos$min_temp == -99.9] <- NA
datos$precipitacion <- na.approx(datos$precipitacion)
datos$max_temp <- na.approx(datos$max_temp)
datos$max_temp <- na.approx(datos$max_temp)
datos$precipitacion <- na.approx(datos$precipitacion)
datos$max_temp <- na.approx(datos$max_temp)
# Completar datos faltantes en la serie de precipitación, max_temp y min_temp utilizando interpolación lineal
datos$precipitacion[datos$precipitacion == -99.9] <- NA
datos$max_temp[datos$max_temp == -99.9] <- NA
datos$min_temp[datos$min_temp == -99.9] <- NA
datos$precipitacion <- na.approx(datos$precipitacion)
datos$max_temp <- na.approx(datos$max_temp)
datos$min_temp <- na.approx(datos$min_temp)
clear
clear()
ls
lcs
datos$precipitacion <- na.approx(datos$precipitacion)
datos$max_temp <- na.approx(datos$max_temp)
datos$min_temp <- na.approx(datos$min_temp)
# Calcular la precipitación total anual
precipitacion_anual <- aggregate(precipitacion ~ año, data = datos, sum)
# Calcular el promedio de temperatura máxima y mínima por año
promedio_max_temp <- aggregate(max_temp ~ año, data = datos, mean)
promedio_min_temp <- aggregate(min_temp ~ año, data = datos, mean)
View(precipitacion_anual)
View(promedio_max_temp)
View(promedio_min_temp)
View(datos)
library(readr)
detach("package:readr", unload = TRUE)
la.cascarilla <- read.table("~/Documents/jupyter notebook/estaciones/la cascarilla.csv", quote="\"", comment.char="")
View(la.cascarilla)
# Cargar los datos desde el archivo CSV
datos <- read.csv('la.cascarilla', header = FALSE, sep = " ")
# Cargar los datos desde el archivo CSV
datos <- read.csv('la cascarilla', header = FALSE, sep = " ")
View(la.cascarilla)
# Cargar los datos desde el archivo CSV
datos <- read.csv(file.choose(), header = FALSE, sep = " ")
# Cargar los datos desde el archivo CSV
datos <- read.csv(file.choose(), header = FALSE, sep = " ")
# Asignar nombres a las columnas
colnames(datos) <- c("año", "mes", "dia", "precipitacion", "max_temp", "min_temp")
View(datos)
library(zoo)
# Completar datos faltantes en la serie de precipitación, max_temp y min_temp utilizando interpolación lineal
datos$precipitacion[datos$precipitacion == -99.9] <- NA
datos$max_temp[datos$max_temp == -99.9] <- NA
datos$min_temp[datos$min_temp == -99.9] <- NA
datos$precipitacion <- na.approx(datos$precipitacion)
datos$max_temp <- na.approx(datos$max_temp)
datos$precipitacion <- na.approx(datos$precipitacion)
datos$max_temp <- na.approx(datos$max_temp)
datos$min_temp <- na.approx(datos$min_temp)
# Calcular la precipitación total anual
precipitacion_anual <- aggregate(precipitacion ~ año, data = datos, sum)
# Calcular el promedio de temperatura máxima y mínima por año
promedio_max_temp <- aggregate(max_temp ~ año, data = datos, mean)
promedio_min_temp <- aggregate(min_temp ~ año, data = datos, mean)
# Crear un gráfico de barras
ggplot() +
geom_bar(data = precipitacion_anual, aes(x = año, y = precipitacion), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(data = promedio_max_temp, aes(x = año, y = max_temp, color = "Temperatura Máxima")) +
geom_line(data = promedio_min_temp, aes(x = año, y = min_temp, color = "Temperatura Mínima")) +
labs(x = "Año", y = "Precipitación Total (mm) / Temperatura (°C)", title = "Precipitación Total Anual y Promedio de Temperaturas") +
scale_color_manual(values = c("Temperatura Máxima" = "red", "Temperatura Mínima" = "blue")) +
theme_minimal()
# Crear un gráfico de barras
ggplot() +
geom_bar(data = precipitacion_anual, aes(x = año, y = precipitacion), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(data = promedio_max_temp, aes(x = año, y = max_temp, color = "Temperatura Máxima")) +
geom_line(data = promedio_min_temp, aes(x = año, y = min_temp, color = "Temperatura Mínima")) +
labs(x = "Año", y = "Precipitación Total (mm) / Temperatura (°C)", title = "Precipitación Total Anual y Promedio de Temperaturas") +
scale_color_manual(values = c("Temperatura Máxima" = "red", "Temperatura Mínima" = "blue")) +
theme_minimal()
library(ggplot2)
# Crear un gráfico de barras
ggplot() +
geom_bar(data = precipitacion_anual, aes(x = año, y = precipitacion), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(data = promedio_max_temp, aes(x = año, y = max_temp, color = "Temperatura Máxima")) +
geom_line(data = promedio_min_temp, aes(x = año, y = min_temp, color = "Temperatura Mínima")) +
labs(x = "Año", y = "Precipitación Total (mm) / Temperatura (°C)", title = "Precipitación Total Anual y Promedio de Temperaturas") +
scale_color_manual(values = c("Temperatura Máxima" = "red", "Temperatura Mínima" = "blue")) +
theme_minimal()
View(promedio_max_temp)
View(precipitacion_anual)
install.packages('Hmisc')
install.packages("Hmisc")
install.packages("mice")
a <- "hola"
a
install.packages("mice")
install.packages("tydeverse")
install.packages("mice")
clear
ls
install.packages("Hmisc")
install.packages("Hmisc")
clc
clc()
help()
install.packages("mice")
install.packages("Hmisc")
install.packages("mice")
install.packages("Hmisc", dependencies = TRUE)
install.packages(magic)
install.packages("magic")
?magic
??magic
install.packages("tidyverse")
install.packages(‘googledrive’, ‘googlesheets4’, ‘httr’, ‘ragg’, ‘rvest’, ‘xml2’)
install.packages(‘googledrive’)
install.packages('googledrive')
install.packages('curl')
install.packages("tidyverse")
install.packages("tidyverse")
update.packages()
install.packages("tidyverse", dependencies = TRUE)
install.packages(c("DEoptimR", "fansi", "htmltools", "systemfonts", "vroom"))
install.packages("tidyverse", dep = TRUE)
library(magic)
magic(4)
install.packages("tidyverse", dep = TRUE)
install.packages("DataExplorer")
setwd("~/Documents/R studio/Proyects/Analisis de consistencia")
##Analisís de datos dudosos
#importar las funciones
source("tabla.R")
source("Completar datos.R")
source("clean.R")
source("analisis de datos dudosos.R")
source("graphics.R")
#importar los datos
datos <- read.csv("data/pucara.csv", header = FALSE, sep = ' ')
#Damos forma a la tabla
datos <- setTable(datos)
#Verificamos datos nulos
library(mice)
md.pattern(datos, rotate.names = TRUE)
#limpiamos los datos
datos.cleaned <- clean(datos)
#verificamos datos nulos de nuevo
md.pattern(datos.cleaned, rotate.names = TRUE)
#completamos datos faltantes
datos.fill <- fillInter(datos.cleaned)
datos.fill2 <- fillMean(datos.cleaned)
#agregar maximos totales y logaritmos
datos.fill <- addTail(datos.fill)
datos.fill2 <- addTail(datos.fill2)
#calcular el valores atipicos
values.atipicos <- getXH(datos.fill)
values.atipicos2 <- getXH(datos.fill2)
#graficamos
getGraph(datos.fill, values.atipicos)
getGraph(datos.fill2, values.atipicos2)
View(datos.fill)
View(datos.fill2)
View(datos.fill2)
source("graphics.R")
#graficamos
getGraph(datos.fill, values.atipicos)
getGraph(datos.fill2, values.atipicos2)
getGraph(datos.fill2, values.atipicos2)
View(datos.fill)
#completamos datos faltantes
datos.fill <- fillInter(datos.cleaned)
datos.fill2 <- fillMean(datos.cleaned)
#agregar maximos totales y logaritmos
datos.fill <- addTail(datos.fill)
datos.fill2 <- addTail(datos.fill2)
#calcular el valores atipicos
values.atipicos <- getXH(datos.fill)
values.atipicos2 <- getXH(datos.fill2)
#graficamos
getGraph(datos.fill, values.atipicos)
getGraph(datos.fill2, values.atipicos2)
print(datos)
source("graphics.R")
#graficamos
getGraph(datos.fill, values.atipicos)
getGraph(datos.fill2, values.atipicos2)
#ajustar los datos
datos.fill.re <- reclean(datos.fill2, values.atipicos2)
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
ggplot(datos, aes(x = año, y = pp_max)) +
geom_point(color = "blue", size = 1) +
geom_line(data = datos, aes(x = año, y = pp_max, color = "Precipitación")) +
geom_smooth(method = "lm", color = "red", se = FALSE, linetype = "dashed") +
geom_line(data = datos, aes(x = año, y = values[2], color = "Precipitación Mínima")) +
geom_line(data = datos, aes(x = año, y = values[1], color = "Precipitación Máxima")) +
labs(x = "", y = "Precipitación Max (mm)", title = "Análisis de consistencia", subtitle = "Histograma de precipitación anual histórica\n", caption = "Source: SENAMHI") +
scale_color_manual(values = c("Precipitación" = "blue", "Precipitación Mínima" = "purple", "Precipitación Máxima" = "orange")) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position = c(0.5,0.8),
legend.direction = "horizontal",  # Establecer la dirección de la leyenda
legend.title = element_blank(),     # Opcional: eliminar el título de la leyenda
legend.key.width = unit(1, "cm"))  # Opcional: ajustar el ancho de las teclas de la leyenda
source("graphics.R")
getGraph(datos.fill.re, values.atipicos2)
